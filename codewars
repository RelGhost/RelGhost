<--------Warming Up (Fundamentals)------->



Vowel Count:

function getCount(string) {
    return (string.match(/[aeiouAEIOU]/g) || []).length;
}
Even or Odd
function evenOrOdd(number) {
    return number % 2 === 0 ? 'Even' : 'Odd';
}
Get the Middle Character :

function getMiddle {
    const middle = Math.floor(s.length / 2);
    return s.length % 2 === 0 ? s.substr(middle - 1, 2) : s.charAt(middle);
}


Opposite Number 

function opposite(number) {
    return -number;
}


Mumbling 

function accum(s) {
    return s.split('').map((char, index) => char.toUpperCase() + char.toLowerCase().repeat(index)).join('-');
}

You're a square! 

function isSquare(n) {
    return Math.sqrt(n) % 1 === 0;
}
Disemvowel Trolls 

function disemvowel(str) {
    return str.replace(/[aeiouAEIOU]/g, '');
}
Highest and Lowest 

function highAndLow(numbers) {
    const numArray = numbers.split(' ').map(Number);
    const max = Math.max(...numArray);
    const min = Math.min(...numArray);
    return `${max} ${min}`;
}
Exes and Ohs :

function XO(str) {
    const xCount = (str.match(/x/gi) || []).length;
    const oCount = (str.match(/o/gi) || []).length;
    return xCount === oCount;
}
Square Every Digit 

function squareDigits(num) {
    const digits = num.toString().split('');
    const squaredDigits = digits.map(digit => Math.pow(parseInt(digit), 2));
    return parseInt(squaredDigits.join(''));
}
Shortest Word 

function findShort(s) {
    const words = s.split(' ');
    const shortestLength = Math.min(...words.map(word => word.length));
    return shortestLength;
}
Complementary DNA 

function DNAStrand(dna) {
    const complementary = { 'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C' };
    return dna.split('').map(base => complementary[base]).join('');
}
Descending Order 

function descendingOrder(n) {
    return parseInt(n.toString().split('').sort((a, b) => b - a).join(''));
}
Sum of Positive 

function positiveSum(arr) {
    return arr.filter(num => num > 0).reduce((acc, num) => acc + num, 0);
}
Isograms 

function isIsogram(str) {
    const lowercaseStr = str.toLowerCase();
    return new Set(lowercaseStr).size === lowercaseStr.length;
}

List Filtering 
function filter_list(lst) {
    return lst.filter(item => typeof item === 'number');
}

Find the smallest integer ray 

function findSmallestInt(arr) {
    return Math.min(...arr);
}
Sum of two lowest positive integers 
function sumTwoSmallestNumbers(numbers) {
    const positiveNumbers = numbers.filter(num => num > 0);
    const sortedNumbers = positiveNumbers.sort((a, b) => a - b);
    return sortedNumbers[0] + sortedNumbers[1];
}
Growth of a Population 
function nbYear(p0, percent, aug, p) {
    let years = 0;
    while (p0 < p) {
        p0 += (p0 * (percent / 100)) + aug;
        years++;
    }
    return years;
}
String repeat 
function repeatStr(n, str) {
    return str.repeat(n);
}


<------Algorithms---->


Is this a triangle

function isTriangle(a, b, c) {
    return a + b > c && a + c > b && b + c > a;
}
Find the next perfect square

function findNextSquare(sq) {
    const root = Math.sqrt(sq);
    if (Number.isInteger(root)) {
        return Math.pow(root + 1, 2);
    } else {
        return -1;
    }
}
Credit Card Mask 

function maskify(cc) {
    const visibleDigits = cc.slice(-4);
    const maskedDigits = cc.slice(0, -4).replace(/./g, '#');
    return maskedDigits + visibleDigits;
}
Sum of odd numbers 

function rowSumOddNumbers(n) {
    return Math.pow(n, 3);
}
Find the divisors

function divisors(integer) {
    const divs = [];
    for (let i = 2; i < integer; i++) {
        if (integer % i === 0) {
            divs.push(i);
        }
    }
    return divs.length ? divs : `${integer} is prime`;
}


<-----------Data Types----------->

Return Negative 

function makeNegative(number) {
    return number > 0 ? -number : number;
}
Remove First and Last Character 

function removeChar(str) {
    return str.slice(1, -1);
}
Remove String Spaces 

function noSpace(x) {
    return x.replace(/ /g, '');
}
Convert boolean values to strings 'Yes' or 'No' 

function boolToWord(b) {
    return b ? 'Yes' : 'No';
}
Convert a Number to a String

function numberToString(num) {
    return num.toString();
}

<------Numbers------>


Basic Mathematical Operations 

function basicOp(operation, value1, value2) {
    switch (operation) {
        case '+':
            return value1 + value2;
        case '-':
            return value1 - value2;
        case '*':
            return value1 * value2;
        case '/':
            return value1 / value2;
        default:
            return 0; // Handle invalid operations
    }
}
Sum of the first nth term of Series 

function seriesSum(n) {
    let sum = 0;
    for (let i = 0; i < n; i++) {
        sum += 1 / (3 * i + 1);
    }
    return sum.toFixed(2);
}
Keep Hydrated


function litres(time) {
    return Math.floor(time * 0.5);
}
Century From Year 


function century(year) {
    return Math.ceil(year / 100);
}
Beginner - Lost Without a Map 

function maps(x) {
    return x.map(num => num * 2);
}


<-------Strings------>

Reversed Strings

function solution(str) {
    return str.split('').reverse().join('');
}
String ends with

function solution(str, ending) {
    return str.endsWith(ending);
}
Do I get a bonus

function bonusTime(salary, bonus) {
    return bonus ? `£${salary * 10}` : `£${salary}`;
}
Abbreviate a Two Word Name 

function abbrevName(name) {
    const names = name.split(' ');
    return `${names[0][0].toUpperCase()}.${names[1][0].toUpperCase()}`;
}
DNA to RNA Conversion 

function DNAtoRNA(dna) {
    return dna.replace(/T/g, 'U');
}

<--------Arrays------->

Counting sheep...:
function countSheeps(arrayOfSheep) {
    return arrayOfSheep.filter(Boolean).length;
}

Ones and Zeros:
function binaryArrayToNumber(arr) {
    return parseInt(arr.join(''), 2);
}

A Needle in the Haystack:
function findNeedle(haystack) {
    const index = haystack.indexOf('needle');
    return `found the needle at position ${index}`;
}

Remove the minimum:
function removeSmallest(arr) {
    const minIndex = arr.indexOf(Math.min(...arr));
    return [...arr.slice(0, minIndex), ...arr.slice(minIndex + 1)];
}

Convert number to reversed array of digits:
function digitize(n) {
    return String(n).split('').map(Number).reverse();
}



<-------Objects-------->

Make a function that does arithmetic!:

function arithmetic(a, b, operator) {
    switch (operator) {
        case 'add':
            return a + b;
        case 'subtract':
            return a - b;
        case 'multiply':
            return a * b;
        case 'divide':
            return a / b;
    }
}

Regular Ball Super Ball:

var Ball = function(ballType = 'regular') {
    this.ballType = ballType;
};

Make them bark!:

class Dog {
    constructor(name, breed, bark) {
        this.name = name;
        this.breed = breed;
        this.bark = bark;
    }
}

const apollo = new Dog('Apollo', 'Doberman', 'Woof-Woof');

Add property to every object in array:

function addNameProperty(array, name) {
    return array.map(obj => ({ ...obj, name }));
}

FIXME: Get Full Name:

class Dinglemouse {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    
    getFullName() {
        return `${this.firstName} ${this.lastName}`.trim();
    }
}


<--------Basic Language Features------->


Grasshopper - Summation:
var summation = function (num) {
    let sum = 0;
    for (let i = 1; i <= num; i++) {
        sum += i;
    }
    return sum;
};

Jenny's secret message:
function greet(name) {
    return name === "Johnny" ? "Hello, my love!" : "Hello, " + name + "!";
}

Function 1 - hello world:
function greet() {
    return "hello world!";
}

Count the Monkeys!:
function monkeyCount(n) {
    return Array.from({ length: n }, (_, i) => i + 1);
}

Are You Playing Banjo?:
function areYouPlayingBanjo(name) {
    return name[0].toLowerCase() === "r" ? name + " plays banjo" : name + " does not play banjo";
}



<-------------Conditional Statements (Control Flow)-------->



Find the capitals:
function capitals(word) {
    const capitalIndices = [];
    for (let i = 0; i < word.length; i++) {
        if (word[i] === word[i].toUpperCase()) {
            capitalIndices.push(i);
        }
    }
    return capitalIndices;
}

Plural:
function plural(n) {
    return n !== 1;
}

Drink about:
function peopleWithAgeDrink(age) {
    if (age < 14) {
        return "drink toddy";
    } else if (age < 18) {
        return "drink coke";
    } else if (age < 21) {
        return "drink beer";
    } else {
        return "drink whisky";
    }
}

Leonardo Dicaprio and Oscars:
function leo(oscar) {
    return oscar === 88 ? "Leo finally won the Oscar! Leo is happy" : oscar === 86 ? "Not even for Wolf of Wall Street?!" : "When will you give Leo an Oscar?";
}

Switch/Case - Bug Fixing #6:
function evalObject(value) {
    switch(value.operation) {
        case '+':
            return value.a + value.b;
        case '-':
            return value.a - value.b;
        case '*':
            return value.a * value.b;
        case '/':
            return value.a / value.b;
        default:
            return NaN;
    }
}


<------Loops----->

Sentence Smash:
function smash(words) {
    return words.join(' ');
}

If you can't sleep, just count sheep!!:
var countSheep = function (num) {
    let result = '';
    for (let i = 1; i <= num; i++) {
        result += `${i} sheep...`;
    }
    return result;
};

Double Char:
function doubleChar(str) {
    return str.split('').map(char => char + char).join('');
}

Unfinished Loop - Bug Fixing #1:
function createArray(number) {
    var newArray = [];
    for (var i = 1; i <= number; i++) {
        newArray.push(i);
    }
    return newArray;
}

Sum of numbers from 0 to N:
var SequenceSum = (function() {
    function SequenceSum() {}

    SequenceSum.showSequence = function(count) {
        if (count < 0) {
            return count + '<0';
        } else if (count === 0) {
            return '0=0';
        } else {
            var sequence = Array.from({ length: count + 1 }, (_, i) => i).join('+');
            var sum = Array.from({ length: count + 1 }, (_, i) => i).reduce((a, b) => a + b, 0);
            return `${sequence} = ${sum}`;
        }
    };

    return SequenceSum;
})();


<----------Changing Gears-------->


Multiples of 3 or 5:
function solution(number) {
    let sum = 0;
    for (let i = 3; i < number; i++) {
        if (i % 3 === 0 || i % 5 === 0) {
            sum += i;
        }
    }
    return sum;
}

Sum of Digits / Digital Root:
function digital_root(n) {
    if (n < 10) {
        return n;
    }
    const digits = String(n).split('').map(Number);
    const sum = digits.reduce((acc, digit) => acc + digit, 0);
    return digital_root(sum);
}

Who likes it?:
function likes(names) {
    switch (names.length) {
        case 0:
            return 'no one likes this';
        case 1:
            return `${names[0]} likes this`;
        case 2:
            return `${names[0]} and ${names[1]} like this`;
        case 3:
            return `${names[0]}, ${names[1]} and ${names[2]} like this`;
        default:
            return `${names[0]}, ${names[1]} and ${names.length - 2} others like this`;
    }
}

Find The Parity Outlier:
function findOutlier(integers) {
    const even = integers.filter(num => num % 2 === 0);
    const odd = integers.filter(num => num % 2 !== 0);
    return even.length === 1 ? even[0] : odd[0];
}

Stop gninnipS My sdroW!:
function spinWords(sentence) {
    return sentence.split(' ').map(word => word.length >= 5 ? word.split('').reverse().join('') : word).join(' ');
}
